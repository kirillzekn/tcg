# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: 
- none

#- main

pool:
  vmImage: ubuntu-latest

steps:
- task: TerraformTaskV2@2
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
    backendServiceArm: 'Pay-As-You-Go(7eb18278-1682-4ad9-9148-814e2b6039f9)'
    backendAzureRmResourceGroupName: 'epam-tf-backeng-rg'
    backendAzureRmStorageAccountName: 'epamtfbackendstorage'
    backendAzureRmContainerName: 'terraform-tcg'
    backendAzureRmKey: 'terraform.tfstate'
- bash: "echo $(System.DefaultWorkingDirectory)"
- task: TerraformTaskV2@2
  inputs:
    provider: 'azurerm'
    command: 'validate'
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'

- task: TerraformTaskV2@2
  inputs:
    provider: 'azurerm'
    command: 'plan'
    environmentServiceNameAzureRM: 'Pay-As-You-Go(7eb18278-1682-4ad9-9148-814e2b6039f9)'
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'

- task: TerraformTaskV2@2
  inputs:
    provider: 'azurerm'
    command: 'destroy'
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
    environmentServiceNameAzureRM: 'Pay-As-You-Go(7eb18278-1682-4ad9-9148-814e2b6039f9)'
